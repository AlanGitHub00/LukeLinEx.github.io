attributes(raw$forecast$simpleforecast$forecastday)
raw$forecast$simpleforecast$forecastday
attributes(raw$forecast$simpleforecast$forecastday)
class(raw$forecast$simpleforecast$forecastday)
str(raw$forecast$simpleforecast$forecastday)
attributes(raw$forecast$simpleforecast$forecastday)
raw$forecast$simpleforecast$forecastday
class(raw$forecast$simpleforecast$forecastday)
raw$forecast$simpleforecast$forecastday
attributes(raw$forecast$simpleforecast$forecastday)
names(raw$forecast$simpleforecast$forecastday)
raw$forecast$simpleforecast$forecastday[1]
raw$forecast$simpleforecast$forecastday[2]
raw$forecast$simpleforecast$forecastday[[2]]
raw$forecast$simpleforecast$forecastday[[4]]
list(c(1,2,3))
a = list(c(1,2,3))
attributes(a)
a = list('aa' = c(1,2,3))
attributes(a)
raw$forecast$simpleforecast$forecastday
length(raw$forecast$simpleforecast$forecastday)
class(raw$forecast$simpleforecast$forecastday[[1]])
attributes(raw$forecast$simpleforecast$forecastday[[1]])
raw$forecast$simpleforecast$forecastday[[1]]$high
url
shiny::runApp('Documents/temp_desk1/BootCamp/better_shape_proj/My_App/proj2_used')
#####################################################
#####################################################
#####[01] Foundations of Statistics Lecture Code#####
#####################################################
#####################################################
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
#distributed observations with a
#mean of 70 and standard deviation
#of 1.
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(heights, main = "Sample Distribution of Heights")
abline(h = 70, lwd = 2, lty = 2)
abline(h = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.statistic                                                #the t-statistic
#comparing to 68.
pt(q = t.statistic, df = 99, lower.tail = FALSE) #P-value is extremely small;
#reject the null hypothesis
#in favor of the alternative.
t.test(heights, mu = 68, alternative = "greater")
t.test(heights, mu = 68, alternative = "less")$p.value
t.test(heights, mu = 68, alternative = "greater")$p.value
t.test(heights, mu = 68, alternative = "two-sided")$p.value
t.test(heights, mu = 68, alternative = "two.sided")$p.value
shiny::runApp('Desktop/帳本')
runApp('Desktop/帳本')
shiny::runApp('Desktop/my_sp')
runApp('Desktop/my_sp')
runApp('Desktop/my_sp')
iris
iris[c(1,2,51,52,101,102),]
iris[c(1,2,51,52,101,102),c(1,2,5)]
?write.csv
write.csv(iris[c(1,2,51,52,101,102),c(1,2,5)], '~/Desktop/haha.csv')
shiny::runApp('Desktop/my_sp')
.libPaths()
?VIM
??VIM
help(sleep) #Inspecting the mammal sleep dataset.
sleep
##################################
#####Visualizing Missing Data#####
##################################
library(VIM) #For the visualization and imputation of missing values.
help(sleep) #Inspecting the mammal sleep dataset.
sleep
##################################
library(VIM) #For the visualization and imputation of missing values.
help(sleep) #Inspecting the mammal sleep dataset.
sleep
summary(sleep) #Summary information for the sleep dataset.
sapply(sleep, sd) #Standard deviations for the sleep dataset; any issues?
aggr(sleep) #A graphical interpretation of the missing values and their
library(mice) #Load the multivariate imputation by chained equations library.
md.pattern(sleep) #Ca
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
missing.data$x2[is.na(missing.data$x2)] = mean(missing.data$x2, na.rm=TRUE)
missing.data
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
missing.data = transform(missing.data, x2 = ifelse(is.na(x2),
mean(x2, na.rm=TRUE),
x2))
ssing.data
missing.data
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
library(dplyr)
mutate(missing.data, x2 = ifelse(is.na(x2), mean(x2, na.rm=TRUE), x2)
)
?transform
library(Hmisc) #Load the Harrell miscellaneous library.
missing.data
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
is.imputed(missing.data) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
missing.data$x2
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
p
plot(missing.data) #What are some potential problems with mean value imputation?
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
set.seed(0)
imputed.x2 = impute(missing.data$x2, "random") #Simple random imputation using the
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
imputed.1nn = kNN(missing.data, k = 1) #Imputing using 1NN.
imputed.5nn = kNN(missing.data, k = 5) #Imputing using 5NN.
imputed.9nn = kNN(missing.data, k = 9) #Imputing using 9NN.
imputed.1nn #Inspecting the imputed values of each of the methods;
imputed.5nn #what is going on here? Given our dataset, should we
imputed.9nn #expect these results?
?kNN
sqrt(nrow(sleep)) #Determining K for the sleep dataset.
sleep.imputed8NN = kNN(sleep, k = 8) #Using 8 nearest neighbors.
sleep.imputed8NN
summary(sleep) #Summary information for the original sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
help(iris) #Inspecting the iris measurement dataset.
iris
iris.example = iris[, c(1, 2, 5)] #For illustration purposes, pulling only the
set.seed(0)
iris.example$Sepal.Length = jitter(iris.example$Sepal.Length, factor = .5)
iris.example$Sepal.Width = jitter(iris.example$Sepal.Width, factor= .5)
col.vec = c(rep("red", 50), #Creating a color vector for plotting purposes.
rep("green", 50),
rep("blue", 50))
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
library(ggplot2)
ggplot(iris.example)+ geom_point(aes(Sepal.Length, Sepal.Width, color  =Species))
missing.vector = c(41:50, 91:100, 141:150) #Inducing missing values on the Species
iris.example$Species[missing.vector] = NA  #vector for each category.
iris.example
ggplot(iris.example)+ geom_point(aes(Sepal.Length, Sepal.Width, color  =Species))
col.vec[missing.vector] = "purple" #Creating a new color vector to
#mark the missing values.
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica", "NA"),
pch = 16, col = c("red", "green", "blue", "purple"), cex = .75)
ggplot(iris.example)+ geom_point(aes(Sepal.Length, Sepal.Width, color  =Species))
library(deldir) #Load the Delaunay triangulation and Dirichelet tesselation library.
info = deldir(iris.example$Sepal.Length[-missing.vector],
iris.example$Sepal.Width[-missing.vector])
install.packages('deldir')
library(deldir) #Load the Delaunay triangulation and Dirichelet tesselation library.
info = deldir(iris.example$Sepal.Length[-missing.vector],
iris.example$Sepal.Width[-missing.vector])
info
?deldir
?tile.list
tile.list(info)
plot.tile.list(tile.list(info),
fillcol = col.vec[-missing.vector],
main = "Iris Voronoi Tessellation\nDecision Boundaries")
points(iris.example$Sepal.Length[missing.vector],
iris.example$Sepal.Width[missing.vector],
pch = 16, col = "white")
points(iris.example$Sepal.Length[missing.vector],
iris.example$Sepal.Width[missing.vector],
pch = "?", cex = .66)
iris.imputed1NN = kNN(iris.example, k = 1)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed1NN$Species)
sqrt(nrow(iris.example))
iris.imputed12NN = kNN(iris.example, k = 12)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed12NN$Species)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed1NN$Species)
iris$Species
iris.imputed1NN$Species
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed1NN$Species)
sqrt(nrow(iris.example))
iris.imputed12NN = kNN(iris.example, k = 12)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed12NN$Species)
library(kknn) #Load the weighted knn library.
#Separating the complete and missing observations for use in the kknn() function.
complete = iris.example[-missing.vector, ]
missing = iris.example[missing.vector, -3]
#Distance corresponds to the Minkowski power.
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2)
summary(iris.euclidean)
iris.manhattan = kknn(Species ~ ., complete, missing, k = 12, distance = 1)
summary(iris.manhattan)
library(ggplot2)
library(plotly)
A = getSymbols('xom', src = "yahoo", auto.assign = FALSE)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
head(A)
row.names(A)
rownames(A)
A
colnames(A)
class(A)
?xts
index(A)
class(index(A))
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
plot_ly(x = index(A), y = A$Close)
colnames(A)
plot_ly(x = index(A), y = A$XOM.Adjusted)
now_ct <- as.POSIXct(Sys.time())
tm <- seq(0, 600, by = 10)
x <- now_ct - tm
y <- rnorm(length(x))
plot_ly(x = x, y = y)
as.POSIXct(index(A))
today <- Sys.Date()
tm <- seq(0, 600, by = 10)
x <- today - tm
y <- rnorm(length(x))
plot_ly(x = x, y = y)
x
class(x)
class(y)
plot_ly(x = index(A), y = A$XOM.Adjusted)
length(index(A))
length(index(A$XOM.Adjusted))
length((A$XOM.Adjusted))
plot_ly(x = index(A), y = A$XOM.Adjusted)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
plot_ly(x = index(A), y = A$XOM.Adjusted)
dtime = index(A)
price = A$XOM.Adjusted
plot_ly(x = dtime, y = price)
price
class(price)
as.numeric(price)
price=as.numeric(price)
plot_ly(x = dtime, y = price)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
plot_ly(x = dtime, y = price)
library(quantmod)
library(ggplot2)
library(plotly)
A = getSymbols('xom', src = "yahoo", auto.assign = FALSE)
Sys.setenv("plotly_username"="lukelin")
Sys.setenv("plotly_api_key"="g68skvbb4f")
dtime = index(A)
price = as.numeric(A$XOM.Adjusted)
plot_ly(x = dtime, y = price)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
plot_ly(x = dtime, y = price)
symb = 'AAPL'
A = getSymbols(symb, src = "yahoo", auto.assign = FALSE)
Sys.setenv("plotly_username"="lukelin")
Sys.setenv("plotly_api_key"="g68skvbb4f")
dtime = index(A)
eval(paste('price = as.numeric(A$',symb, 'Adjusted'))
plot_ly(x = dtime, y = price)
plot_ly(x = dtime, y = price)
symb = 'GOOG'
A = getSymbols(symb, src = "yahoo", auto.assign = FALSE)
Sys.setenv("plotly_username"="lukelin")
Sys.setenv("plotly_api_key"="g68skvbb4f")
dtime = index(A)
eval(paste('price = as.numeric(A$',symb, 'Adjusted'))
plot_ly(x = dtime, y = price)
symb = 'GOOG'
A = getSymbols(symb, src = "yahoo", auto.assign = FALSE)
Sys.setenv("plotly_username"="lukelin")
Sys.setenv("plotly_api_key"="g68skvbb4f")
dtime = index(A)
eval(paste0('price = as.numeric(A$',symb, 'Adjusted'))
plot_ly(x = dtime, y = price)
symb = 'GOOG'
A = getSymbols(symb, src = "yahoo", auto.assign = FALSE)
Sys.setenv("plotly_username"="lukelin")
Sys.setenv("plotly_api_key"="g68skvbb4f")
dtime = index(A)
eval(paste0('price = as.numeric(A$',symb, '.Adjusted'))
plot_ly(x = dtime, y = price)
symb = 'GOOG'
A = getSymbols(symb, src = "yahoo", auto.assign = FALSE)
Sys.setenv("plotly_username"="lukelin")
Sys.setenv("plotly_api_key"="g68skvbb4f")
dtime = index(A)
eval(paste0('price = as.numeric(A$',symb, '.Adjusted)'))
plot_ly(x = dtime, y = price)
eval(parse(paste0('price = as.numeric(A$',symb, '.Adjusted)')))
paste0('price = as.numeric(A$',symb, '.Adjusted)'))
paste0('price = as.numeric(A$',symb, '.Adjusted)')
A
colnames(A)
eval(parse(paste0('price = as.numeric(A$',symb, '.Adjusted)')))
paste0('price = as.numeric(A$',symb, '.Adjusted)')
price = as.numeric(A$GOOG.Adjusted)
plot_ly(x = dtime, y = price)
txt = paste0('price = as.numeric(A$',symb, '.Adjusted)')
txt
symb = 'GOOG'
A = getSymbols(symb, src = "yahoo", auto.assign = FALSE)
Sys.setenv("plotly_username"="lukelin")
Sys.setenv("plotly_api_key"="g68skvbb4f")
dtime = index(A)
eval(parse(txt))
txt = paste0('price = as.numeric(A$',symb, '.Adjusted)')
eval(parse(txt))
eval(parse(text = txt))
symb = 'GOOG'
A = getSymbols(symb, src = "yahoo", auto.assign = FALSE)
Sys.setenv("plotly_username"="lukelin")
Sys.setenv("plotly_api_key"="g68skvbb4f")
dtime = index(A)
txt = paste0('price = as.numeric(A$',symb, '.Adjusted)')
eval(parse(text = txt))
plot_ly(x = dtime, y = price)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
plot_ly(x = dtime, y = price)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
plot_ly(x = dtime, y = price)
library(quantmod)
plot_ly(x = dtime, y = price)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
plot_ly(x = dtime, y = price)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
plot_ly(x = dtime, y = price)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
plot_ly(x = dtime, y = price)
source('~/Desktop/haha.R')
dtime
txt
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
df
colnames(df)
?group_by
df %>% group_by(row.names)
df %>% groupby(row.names)
df %>% groupby(close)
df %>% group_by(Close)
library(dplyr)
df %>% group_by(Close)
df = as.data.frame(df)
df
colnames(df)
rownames(df)
class(rownames(df))
sapply(row.names(df), function(x) x[6:7])
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
df
nrow(df)
nrow(df)/30
floor(nrow(df)/30)
for(i in 0:7)
dsf
for(i in 0:7) print(i)
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
class(dtime)
X
X
dtime[1]
class(dtime[1])
dtime[1]
dtime[1:2]
dtime[(1:2)*10]
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
X
dtime[i*30:30*(i+1)]
dtime[2*30:30*(2+1)]
dtime[60:90]
dtime[(i*30):30*(i+1)]
dtime[(i*30):(30*(i+1))]
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
source('~/Documents/Python/Record/wti_database/plotly_shiny.R')
shiny::runApp('Desktop/my_sp')
shiny::runApp('Desktop/my_sp')
shiny::runApp('Desktop/my_sp')
install.packages("ggplot2")
runApp('Desktop/my_sp')
install.packages("DBI")
runApp('Desktop/my_sp')
install.packages("RSQLite")
runApp('Desktop/my_sp')
shiny::runApp('Documents/temp_desk1/BootCamp/better_shape_proj/My_App/proj2_used')
shiny::runApp('Documents/temp_desk1/BootCamp/better_shape_proj/My_App/proj2_used')
install.packages("quantmod")
?getSymbol
library(quantmod)
?getSymbol
?getSymbols
getSymbols('XOM')
XOM
R
3D Surface Plots
Fork on Github
Navigation
3D Surface Plots in R
2D Kernel Density Estimation
Multiple Surfaces
Back To R
3D Surface Plots in R
How to make interactive 3D surface plots in R.
r R
python Python
plotly.js plotly.js
pandas Pandas
node js node.js
matlab MATLAB
3D Surface Plots in R
library(plotly)
# volcano is a numeric matrix that ships with R
plot_ly(z = volcano, type = "surface")
library(plotly)
# volcano is a numeric matrix that ships with R
plot_ly(z = volcano, type = "surface")
install.packages("plotly")
library(plotly)
# volcano is a numeric matrix that ships with R
plot_ly(z = volcano, type = "surface")
# variance-covariance matrix for a multivariate normal distribution
s <- matrix(c(1, .5, .5,
.5, 1, .5,
.5, .5, 1), ncol = 3)
# use the mvtnorm package to sample 200 observations
obs <- mvtnorm::rmvnorm(200, sigma = s)
# collect everything in a data-frame
df <- setNames(data.frame(obs), c("x", "y", "z"))
# variance-covariance matrix for a multivariate normal distribution
s <- matrix(c(1, .5, .5,
.5, 1, .5,
.5, .5, 1), ncol = 3)
# use the mvtnorm package to sample 200 observations
obs <- mvtnorm::rmvnorm(200, sigma = s)
# collect everything in a data-frame
df <- setNames(data.frame(obs), c("x", "y", "z"))
library(plotly)
plot_ly(df, x = x, y = y, z = z, type = "scatter3d", mode = "markers")
install.packages("mvtnorm")
# variance-covariance matrix for a multivariate normal distribution
s <- matrix(c(1, .5, .5,
.5, 1, .5,
.5, .5, 1), ncol = 3)
# use the mvtnorm package to sample 200 observations
obs <- mvtnorm::rmvnorm(200, sigma = s)
# collect everything in a data-frame
df <- setNames(data.frame(obs), c("x", "y", "z"))
library(plotly)
plot_ly(df, x = x, y = y, z = z, type = "scatter3d", mode = "markers")
source('~/Desktop/wti_database/plotly_shiny.R')
library(dplyr)
source('~/Desktop/comparing_two_sources/comparing.R')
source('~/Desktop/comparing_two_sources/comparing.R')
source('~/Desktop/comparing_two_sources/comparing.R')
get_two('XOM')
get_two('XOM', 'Close')
A = get_two('XOM', 'Close')
head(A)
class(A)
class(A[0])
class(A[[0]])
class(A[[1]])
head(A[[1]])
tail(A[[1]])
