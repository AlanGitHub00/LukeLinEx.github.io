result = 0
while (a > 0)
{
dig = a %% 10
rev = (rev * 10) + dig
a = floor(a / 10)
}
if(n == rev){
#print("Palin")
result = 1
}
else {
#print("Not Palin")
result = 0
}
return(result)
}
largestPalin <- function()
{
arr <- c ()
count =0
for (i in 999:100){
for(j in 999:100){
x = i * j
if(ispalin(x)){
arr[count] = x;
count = count + 1;
}
}
}
return(arr)
}
largest = largestPalin()
max(largest)
shiny::runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
install.packages("rCharts")
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
runApp('Desktop/Yelp')
install.packages("LDAvis")
library(LDAvis)
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
leaflet(yelpBusiness) %>%
addTiles() %>%
addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addCircleMarkers(
radius = 6,
stroke = FALSE,
fillOpacity  =  1,
fillColor =  ~ palColor(yelpBusiness$NewRating),
# clusterOptions = markerClusterOptions(disableClusteringAtZoom = 15,
#                                       # animateAddingMarkers= TRUE,
#                                       animate = TRUE),
popup = ~ paste( sep = "<br/>",
"<b>Description</b>",
paste('<b>business_id : </b>', business_id,sep = ' '  ),
paste('<b>stars :</b>', stars, sep = ' '),
paste('<b>AvgUserStar:</b>',  AvgUserStar, sep = ' '),
paste('<b>AvgReviewCount :</b>',  AvgReviewCount, sep = ' '),
paste('<b>AvgFriends :</b>', AvgFriends , sep = ' '),
paste('<b>is_Elite :</b>',  is_Elite,
sep = ' '),
paste('<b>Price:</b>',  attributes.Price.Range, sep = ' '),
paste('<b>AvgReviewCount :</b>',  AvgReviewCount, sep = ' '),
paste('<b>zip :</b>',  zip, sep = ' ')
)) %>%
setView(lng = -112,
lat = 33.5,
zoom = 12)
palColor = colorFactor(c("blue", "red"),
domain = c("Good", "bad"))
leaflet(yelpBusiness) %>%
addTiles() %>%
addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addCircleMarkers(
radius = 6,
stroke = FALSE,
fillOpacity  =  1,
fillColor =  ~ palColor(yelpBusiness$NewRating),
# clusterOptions = markerClusterOptions(disableClusteringAtZoom = 15,
#                                       # animateAddingMarkers= TRUE,
#                                       animate = TRUE),
popup = ~ paste( sep = "<br/>",
"<b>Description</b>",
paste('<b>business_id : </b>', business_id,sep = ' '  ),
paste('<b>stars :</b>', stars, sep = ' '),
paste('<b>AvgUserStar:</b>',  AvgUserStar, sep = ' '),
paste('<b>AvgReviewCount :</b>',  AvgReviewCount, sep = ' '),
paste('<b>AvgFriends :</b>', AvgFriends , sep = ' '),
paste('<b>is_Elite :</b>',  is_Elite,
sep = ' '),
paste('<b>Price:</b>',  attributes.Price.Range, sep = ' '),
paste('<b>AvgReviewCount :</b>',  AvgReviewCount, sep = ' '),
paste('<b>zip :</b>',  zip, sep = ' ')
)) %>%
setView(lng = -112,
lat = 33.5,
zoom = 12)
shiny::runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
palColor = colorFactor(c("blue", "red"),
domain = c("Good", "bad"))
palColor()
palColor('Good')
yelpBusiness$NewRating
runApp('Desktop/Yelp')
leaflet(yelpBusiness) %>%
addTiles() %>%
addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addCircleMarkers(
radius = 6,
stroke = FALSE,
fillOpacity  =  1,
fillColor =  ~ palColor(yelpBusiness$NewRating)
)
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
leaflet(yelpBusiness) %>%
addTiles() %>%
# addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
#          attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView(lng = -112, lat = 33.5, zoom = 12) %>%
addCircleMarkers(
radius = 6,
stroke = FALSE,
fillOpacity  =  1,
fillColor =  ~ palColor(yelpBusiness$NewRating)
)
summary(yelpBusiness$NewRating)
yelpBusiness$NewRating
summarise(yelpBusiness$NewRating)
unique(yelpBusiness$NewRating)
summary(yelpBusiness$NewRating)
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
palColor = colorFactor(c("blue", "red"),
domain = c("Good", "Bad"))
leaflet(yelpBusiness) %>%
addTiles() %>%
addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addCircleMarkers(
radius = 6,
stroke = FALSE,
fillOpacity  =  1,
fillColor =  ~ palColor(yelpBusiness$NewRating),
# clusterOptions = markerClusterOptions(disableClusteringAtZoom = 15,
#                                       # animateAddingMarkers= TRUE,
#                                       animate = TRUE),
popup = ~ paste( sep = "<br/>",
"<b>Description</b>",
paste('<b>business_id : </b>', business_id,sep = ' '  ),
paste('<b>stars :</b>', stars, sep = ' '),
paste('<b>AvgUserStar:</b>',  AvgUserStar, sep = ' '),
paste('<b>AvgReviewCount :</b>',  AvgReviewCount, sep = ' '),
paste('<b>AvgFriends :</b>', AvgFriends , sep = ' '),
paste('<b>is_Elite :</b>',  is_Elite,
sep = ' '),
paste('<b>Price:</b>',  attributes.Price.Range, sep = ' '),
paste('<b>AvgReviewCount :</b>',  AvgReviewCount, sep = ' '),
paste('<b>zip :</b>',  zip, sep = ' ')
)) %>%
setView(lng = -112,
lat = 33.5,
zoom = 12)
?detach
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
?addCircleMarkers
?visOutput
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
viOutput
library(LDAvis)
viOutput
runApp('Desktop/Yelp')
?leaflet
?renderLeaflet
renderLeaflet
?htmlwidgets::shinyRenderWidget
runApp('Desktop/Yelp')
runApp('Desktop/Yelp')
install.packages("Boruta")
A = read.csv('~/Desktop/NYC_Jobs.csv')
dim(A)
?rep
> paste0(
paste0(
rep(c("a","b","c","d","e"),5),
rep(c("a","b","c","d","e"),times =5 ))
paste0(
rep(c("a","b","c","d","e"),5),
rep(c("a","b","c","d","e"),each =5 ))
emailer<- function(x,ending= '@gmail.com'){
y <- strsplit(x," ")
p <- paste(y[[1]],ending, sep = "")
return(paste(p,sep = " ",collapse = ";"))
}
emailer("John Andrew Thomas")
as.vector(sapply(letters[1:5], function(x) paste0(letters[1:5],x)))
list_letter<-c("a","b","c","d","e")
c(sapply(list_letter, paste0, list))
sapply(list_letter, paste0, list)
sapply(list_letter, paste0, list_letter)
c(sapply(list_letter, paste0, list_letter))
list1<-rep(list_letter,4)
list2<-rep(list1,each=5)
list3<-paste0(list1,list2)
list3
Names = "John Andrew Thomas"                  #original string
NamesVec = strsplit(Names, split=' ')[[1]]    #convert to vector
paste(NamesVec, "@gmail.com", sep = "")       #could also use paste0()
#returns:
#[1] "John@gmail.com"   "Andrew@gmail.com" "Thomas@gmail.com"
gsub("[[:space:]]", "@gmail.com; ", Names)    #leaves off the last name in vector
A<-c("a","b","c","d","e")
as.vector(outer(A,A,FUN = paste,sep=""))
?outer
abc.vec <- letters[1:5]
as.vector(outer(abc.vec, abc.vec, FUN = paste0))
fibo = vector()
#define the first two fibo number as 1 and 2
fibo[1]=1
fibo[2]=2
#Using while loop to create fibo element
i = 1
while (fibo[i] < 4000000){
fibo[i+2] = fibo[i] + fibo[i+1]
i = i + 1
}
length(fibo)
fibo
Names = 'John Andrew Thomas'
Names1 = strsplit(Names, split = ' ')[[1]] # a character vector
paste(Names1, c('gmail.com'), sep='@')
paste(vec1, c(a, b, c, d, e), sep='')
Names = 'John Andrew Thomas'
Names1 = strsplit(Names, split = ' ')[[1]] # a character vector
vec1 = paste(Names1, c('gmail.com'), sep='@')
paste(vec1, c(a, b, c, d, e), sep='')
vec1 = factor(rep(c("a","b","c","d","e"), c(5)))
paste(vec1, c("a", "b", "c", "d", "e"), sep='')
NYC_jobs = read.csv('~/Desktop/NYC_Jobs.csv')
dim(NYC_jobs)
save.image("~/Desktop/NYC_jobs.RData")
library(ggplot2)
tbl_df(mpg) %>%
group_by(manufacturer) %>%
top_n(1,cty)
library(dplyr)
tbl_df(mpg) %>%
group_by(manufacturer) %>%
top_n(1,cty)
tbl_df(mpg) %>%
group_by(manufacturer) %>%
filter(cty==max(cty))
> df_manu_maxcty = mpg %>% group_by(manufacturer) %>% summarise(cty=max(cty))
df_manu_maxcty = mpg %>% group_by(manufacturer) %>% summarise(cty=max(cty))
df_manu_maxcty
data(mpg)
by_manufacturer_model = group_by(mpg, manufacturer, model)
maxcty = summarise(by_manufacturer_model, max(cty))
maxcty
head(mpg)
library(ggplot2)
library(dplyr)
data(mpg)
head(mpg, 20)
?mpg
#b)
s = select(mpg, V1=4, V2=5, V3=8, V4=9)
#c)
summarize(group_by(mpg, cyl), mean(cty))
summarize(group_by(mpg, cyl), mean(hwy))
#d)
d3 <- summarize(group_by(mpg, manufacturer, model), _max = max(cty)) %>% summarise(_max = max(_max))
d3 <- summarize(group_by(mpg, manufacturer, model), mmax = max(cty)) %>% summarise(mmax = max(mmax))
View(d3)
d3 <- summarize(group_by(mpg, manufacturer, model), mmax = max(cty)) #%>% summarise(mmax = max(mmax))
View(d3)
read.csv('~/Desktop/GDP.csv')
A = read.csv('~/Desktop/GDP.csv')
A
View(A)
View(A)
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/tensorflow/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/tensorflow/bin", Sys.getenv("PATH"), sep=":"))
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
#devtools::install_github("rstudio/tensorflow")
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
sess = tf$Session()
library(tensorflow)
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
library(tensorflow)
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
remove.packages("tensorflow")
library(tensorflow)
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
shiny::runApp('Desktop/image_classification_app')
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
tf$models
tf$models
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
tf$models
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
tf$models
classify = tf$models$image$imagenet$classify_image$run_inference_on_image
classify('~/Desktop/red_wine.png')
classify('/Users/LukeLin/Desktop/red_wine.png')
classify('/Users/LukeLin/Desktop/red_wine.jpeg')
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
library(tensorflow)
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
#devtools::install_github("rstudio/tensorflow")
library(tensorflow)
getwd()
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
#devtools::install_github("rstudio/tensorflow")
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
tf$models
classify = tf$models$image$imagenet$classify_image$run_inference_on_image
classify('/Users/LukeLin/Desktop/red_wine.jpeg')
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
library(tensorflow)
Sys.setenv(TENSORFLOW_PYTHON="/Users/lukelin/venv/bin/python")
Sys.setenv(PATH = paste("/Users/lukelin/venv/bin", Sys.getenv("PATH"), sep=":"))
#devtools::install_github("rstudio/tensorflow")
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
tf$models
classify = tf$models$image$imagenet$classify_image$run_inference_on_image
classify('/Users/lukelin/Desktop/red_wine.jpg')
shiny::runApp('Desktop/image_classification_app')
runApp('Desktop/image_classification_app')
runApp('Desktop/image_classification_app')
runApp('Desktop/image_classification_app')
?download.file
runApp('Desktop/image_classification_app')
runApp('Desktop/image_classification_app')
classify('/Users/lukelin/Desktop/red_wine.jpg')
txt = classify('/Users/lukelin/Desktop/red_wine.jpg')
txt
txt = capture.output(classify('/Users/lukelin/Desktop/red_wine.jpg'))
txt
?capture.output
txt = capture.output({classify('/Users/lukelin/Desktop/red_wine.jpg')})
txt
stdout <- vector('character')
con    <- textConnection('stdout', 'wr', local = TRUE)
sink(con)
classify('/Users/lukelin/Desktop/red_wine.jpg')
sink()
close(con)
stdout
stdout <- vector('character')
con    <- textConnection('stdout', 'wr', local = TRUE)
sink(con)
stdout = classify('/Users/lukelin/Desktop/red_wine.jpg')
sink()
close(con)
stdout
stdout <- vector('character')
con    <- textConnection('stdout', 'wr', local = TRUE)
sink(con)
1:10
sink()
close(con)
stdout
System(paste0('python test.py ', file))
file = '/Users/lukelin/Desktop/red_wine.jpg'
System(paste0('python test.py ', file))
system(paste0('python test.py ', file))
setwd('~/Desktop/image_classification_app/')
file = '/Users/lukelin/Desktop/red_wine.jpg'
system(paste0('python test.py ', file))
?system
system(paste0('python test.py ', file), ignore.stderr = T)
a = system(paste0('python test.py ', file), ignore.stderr = T)
a
setwd('~/Desktop/image_classification_app/')
file = '/Users/lukelin/Desktop/red_wine.jpg'
system(paste0('python test.py ', file))
read.csv('result.txt')
read.csv('result.txt',header=FALSE)
read.csv('result.txt',header=FALSE, sep='????')
?read.csv
read.csv('result.txt',header=FALSE, sep='?')
read.csv('result.txt',header=FALSE, sep='(')
read.csv('result.txt',header=FALSE, sep='?')
?renderText
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
?reactive
?download.file
runApp()
runApp()
runApp()
?reactiveValues
?reactive
runApp()
runApp()
?reactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?download.file
runApp()
runApp()
runApp()
?reactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
